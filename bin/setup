#!/usr/bin/env ruby
require 'fileutils'
require 'net/http'
require 'optparse'
include FileUtils

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)
RUBY_VENDOR = File.join(APP_ROOT, 'vendor', 'ruby')
GEM_CACHE = File.join(APP_ROOT, %w(vendor cache))
SOLR_VERSION = '8.4.1'
SOLR_NAME = 'solr-' + SOLR_VERSION
SOLR_PATH = File.join(APP_ROOT, 'vendor', SOLR_NAME)
DEFAULT_PKG = %w(default-jre midori imagemagick rails javascript-common ruby-dev
    build-essential libsqlite3-dev libxml2-dev zlib1g-dev yarnpkg unzip wget)
SOLR_NODE = 'free-documents'

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end


##
# bundle command with ENV variable *GEM_HOME* for custom install
# and do that bundle go through tor. it *tails* is set to true
# *command* is one of the *bundle command*
def bundle(command, tails: true)
  tails_prepend = tails ? "GEM_HOME='#{RUBY_VENDOR}' torsocks" : ""
  "#{tails_prepend} bundle #{command}"
end

def prepare_ruby_vendor
  mkdir_p(RUBY_VENDOR)
  mkdir_p(GEM_CACHE)
  ENV['GEM_HOME'] = RUBY_VENDOR
  system("bundle config set path='#{GEM_CACHE}'")
end

def ip_rules(app_port: 3000, solr_port: 8983, input: true, input_ips: '192.168.0.0/24')
  rules = [
      "iptables -I OUTPUT -d localhost -p tcp --dport #{app_port} -m owner --uid-owner 1000 -j ACCEPT",
      "iptables -I OUTPUT -d localhost -p tcp --dport #{solr_port} -m owner --uid-owner 1000 -j ACCEPT"
  ]
  rules << "iptables -I INPUT -p tcp --dport #{app_port} -s #{input_ips} -j ACCEPT" if input
  rules.join("/n")
end

def deb_pkg(add_pkg = [])
  (DEFAULT_PKG + add_pkg).join(' ')
end

def install_solr
  chdir File.join(APP_ROOT, 'vendor') do
    puts "/n Downloading solr"
    system! "wget 'https://www-eu.apache.org/dist/lucene/solr/#{SOLR_VERSION}/#{SOLR_NAME}.zip'"
    system! "wget 'https://www.apache.org/dist/lucene/solr/#{SOLR_VERSION}/#{SOLR_NAME}.zip.asc'"
    # system! "gpg --verify #{SOLR_NAME}.zip.asc #{SOLR_NAME}.zip"
    system! "unzip #{SOLR_NAME}.zip"
    puts "\n Solr version #{SOLR_VERSION} is installed at #{SOLR_PATH} and not gpg sig verified"
    puts "The zip file and sig file remain in vendor/ dir. Verify it by yourself and then delete them"
  end
end

def solr(cmd = 'start')
  system("#{File.join(SOLR_PATH, 'bin', 'solr')} #{cmd}")
end

##
# Check if a solr node *name* already exists on solr
# return *true* if it exists
def check_solr_node(name, solr_port: 8983)
  Net::HTTP
      .get_response(URI("http://localhost:#{solr_port}/solr/#{name}/select?q=*%3A*&wt=json&indent=true"))
      .code == 200
end

def parse_options
  args = {
      input_ips: '192.168.0.0/24',
      app_port: 3000,
      solr_port: 8983
  }
  tails_options_msg = <<HEREDOC
Please Note:
with options --tails the following options are sets to: 
  --firewall true
  --deb_pkg true
  --ruby_vendor true
HEREDOC
  OptionParser.new do |opts|
    opts.banner = "Usage: bin/setup [options] Make everything necessary to be ready to start the app. Install Solr by default"
    opts.on('-t', '--tails', 'Install under Tails OS') do
      args[:tails] = true
      args[:firewall] = true
      args[:deb_pkg] = true
      args[:ruby_vendor] = true
    end
    opts.on('-l', '--open_inputBOOLEAN', "Open the INPUT table of the firewall with default ips #{args[:input_ips]}
true|false [false]. options --firewall true enabled") do |bool|
      args[:input] = bool
    end
    opts.on('-iI', '--input_ipsIPS', "Open the INPUT table of the firewall for the IPS [#{args[:input_ips]}]") do |ips|
      args[:input_ips] = ips
    end
    opts.on('-a', '--app_portPORT', "The app server will be started on port PORT [#{args[:app_port]}]") do |p|
      args[:app_port] = p
    end
    opts.on('-s', '--solr_portPORT', "The solr server will be started on port PORT [#{args[:app_port]}]") do |p|
      args[:solr_port] = p
    end
    opts.on('-x', '--no_solr_install', "Do not Install Solr") do
      args[:no_solr] = true
    end
    opts.on('-f', '--firewallBOOLEAN' 'Configure the firewall to allow traffic to the app true|false [false]') do |bool|
      args[:firewall] = bool
    end
    opts.on('-d', '--deb_pkgBOOLEAN', 'Install the required deb packages true|false [false]') do |bool|
      args[:deb_pkg] = bool
    end
    opts.on('-r', '--ruby_vendorBOOLEAN', 'Package the ruby gems into vendor/ dir and download them under Tor true|false [false]') do |bool|
      args[:ruby_vendor] = bool
    end
    opts.on('-h', '--help', 'Print the help message') do
      puts opts
      puts tails_options_msg
      exit
    end
  end.parse!
  args
end

chdir APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file.


  args = parse_options

  p args
  exit
  prepare_ruby_vendor if args[:ruby_vendor]

  apt_install = args[:deb_pkg] ? 'apt install -y ' + deb_pkg : ''
  firewall_config = (args[:firewall] or args[:input]) ? ip_rules(args) : ''

  if apt_install.length > 0 or firewall_config.length > 0
    puts "\n== Installing required deb packages and/or configuring firewall =="
    system!("sudo bash -c '#{apt_install}\n#{firewall_config}'")
  end

  puts '== Installing dependencies =='
  b_install = 'install'
  b_install +   ' --full-index --path ' if args[:tails]
  system(bundle('check', tails: args[:tails])) || system!(bundle(b_install, tails: args[:tails]))

  unless args[:no_solr]
    if Dir.exists?(SOLR_PATH)
      puts "/n Solr #{SOLR_VERSION} is installed at path: #{SOLR_PATH}"
    else
      install_solr
    end

    puts "\n== Starting Solr =="
    solr('start')

    puts "/n== Checking if node '#{SOLR_NODE}' already exists... =="
    if check_solr_node('free-documents', args)
      puts 'it exists!'
    else
      puts 'Nope. Creating it.'
      solr("create -c #{SOLR_NODE} -d #{File.join(APP_ROOT, 'solr/configsets/sunspot/conf')}")
    end
  end

  puts "\n == Compiling assets =="
  system!('RAILS_ENV=production bin/rails assets:precompile')

  puts "\n== Preparing database =="
  system!('bin/rails db:create')
  system!('bin/rails db:migrate')

  puts("\n == Firewall config ==")
  if args[:firewall] or args[:input]
    puts("Opened the ports #{app_port} and #{solr_port} in the OUTPUT table of the firewall to localhost")
  end
  puts("The app is accessible from the ips #{input_ips} and from localhost on port #{app_port}") if args[:input]


  # puts '== Installing dependencies =='
  #system! 'gem install bundler --conservative'
  # system('bundle check') || system!('bundle install')

  # Install JavaScript dependencies if using Yarn
  # system('bin/yarn')

  # puts "\n== Copying sample files =="
  # unless File.exist?('config/database.yml')
  #   cp 'config/database.yml.sample', 'config/database.yml'
  # end

  #
  #  puts "\n== Preparing database =="
  #  system!('bin/rails db:create')
  #  system!('bin/rails db:migrate')
  #
  # puts "\n== Removing old logs and tempfiles =="
  # system! 'bin/rails log:clear tmp:clear'

  puts "\n== Now you can start the application server! =="
  system('rails s --help')
end
